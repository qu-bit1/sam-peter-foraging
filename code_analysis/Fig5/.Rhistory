group_by(COND) %>%
count(best_modelAIC)
model_diff_forced <- model_diff %>% filter(COND == "forced")
model_diff_free <- model_diff %>% filter(COND == "free")
dim(best_modelAIC)
AIC_samp_mean=tapply(modelresults.df$AIC, list(modelresults.df$MODEL, modelresults.df$COND), mean)
BIC_samp_mean=tapply(modelresults.df$BIC, list(modelresults.df$MODEL, modelresults.df$COND), mean)
AIC_samp_mean
BIC_samp_mean=
BIC_samp_mean=tapply(modelresults.df$BIC, list(modelresults.df$MODEL, modelresults.df$COND), mean)
BIC_samp_mean
library(tidyverse)
library(psych)
# load model results files
load('model_data/modelresults.Rdata')
load('model_data/modelpredictions.Rdata')
load('model_data/allglms.Rdata')
# process model results to get differences between the models
model_diff <- modelresults.df %>%
group_by(ID, COND) %>%
mutate(bic_2vs1 = BIC[MODEL == 1] - BIC[MODEL == 2],
bic_3vs1 = BIC[MODEL == 1] - BIC[MODEL == 3],
bic_4vs1 = BIC[MODEL == 1] - BIC[MODEL == 4],
aic_2vs1 = AIC[MODEL == 1] - AIC[MODEL == 2],
aic_3vs1 = AIC[MODEL == 1] - AIC[MODEL == 3],
aic_4vs1 = AIC[MODEL == 1] - AIC[MODEL == 4],
# which model is best based on BIC?
best_modelBIC = ifelse((BIC[MODEL == 1] < BIC[MODEL == 2]) && (BIC[MODEL == 1] < BIC[MODEL == 3]) && (BIC[MODEL == 1] < BIC[MODEL == 4]), 1,
ifelse((BIC[MODEL == 2] < BIC[MODEL == 1]) && (BIC[MODEL == 2] < BIC[MODEL == 3]) && (BIC[MODEL == 2] < BIC[MODEL == 4]), 2,
ifelse((BIC[MODEL == 3] < BIC[MODEL == 1]) && (BIC[MODEL == 3] < BIC[MODEL == 2]) && (BIC[MODEL == 3] < BIC[MODEL == 4]), 3, 4))),
# which model is best based on AIC?
best_modelAIC = ifelse((AIC[MODEL == 1] < AIC[MODEL == 2]) && (AIC[MODEL == 1] < AIC[MODEL == 3]) && (AIC[MODEL == 1] < AIC[MODEL == 4]), 1,
ifelse((AIC[MODEL == 2] < AIC[MODEL == 1]) && (AIC[MODEL == 2] < AIC[MODEL == 3]) && (AIC[MODEL == 2] < AIC[MODEL == 4]), 2,
ifelse((AIC[MODEL == 3] < AIC[MODEL == 1]) && (AIC[MODEL == 3] < AIC[MODEL == 2]) && (AIC[MODEL == 3] < AIC[MODEL == 4]), 3, 4))),
# which model is best within specific comparisons (BIC)?
best_2vs1BIC = ifelse(BIC[MODEL == 1] < BIC[MODEL == 2], 1, 2),
best_3vs1BIC = ifelse(BIC[MODEL == 1] < BIC[MODEL == 3], 1, 3),
best_4vs1BIC = ifelse(BIC[MODEL == 1] < BIC[MODEL == 4], 1, 4),
# which model is best within specific comparisons (BIC)?
best_2vs1AIC = ifelse(AIC[MODEL == 1] < AIC[MODEL == 2], 1, 2),
best_3vs1AIC = ifelse(AIC[MODEL == 1] < AIC[MODEL == 3], 1, 3),
best_4vs1AIC = ifelse(AIC[MODEL == 1] < AIC[MODEL == 4], 1, 4)) %>%
distinct(ID, COND, bic_2vs1, bic_3vs1, bic_4vs1, aic_2vs1, aic_3vs1, aic_4vs1, best_modelBIC, best_modelAIC, best_2vs1BIC, best_3vs1BIC,best_4vs1BIC, best_2vs1AIC, best_3vs1AIC, best_4vs1AIC)
# what was the best model over all?
n_best_modelBIC <- model_diff %>%
group_by(COND) %>%
count(best_modelBIC)
n_best_modelAIC <- model_diff %>%
group_by(COND) %>%
count(best_modelAIC)
model_diff_forced <- model_diff %>% filter(COND == "forced")
model_diff_free <- model_diff %>% filter(COND == "free")
# local current value stats vs the baseline model (model 2 vs 1)
# how many participants were better fit with model 2 compared with 1
n_best_2vs1AIC <- model_diff %>%
group_by(COND) %>%
count(best_2vs1AIC)
n_best_2vs1lBIC <- model_diff %>%
group_by(COND) %>%
count(best_2vs1BIC)
# what was the average difference in AIC and BIC scores between model 2 and model 1
mAic_2vs1=tapply(model_diff$aic_2vs1, list(model_diff$COND), mean, na.rm = TRUE)
mBic_2vs1=tapply(model_diff$bic_2vs1, list(model_diff$COND), mean, na.rm = TRUE)
# local reward rate (static) compared with the baseline model (model 3 vs 1)
# how many participants were better fit with model 3 compared with 1
n_best_3vs1AIC <- model_diff %>%
group_by(COND) %>%
count(best_3vs1AIC)
n_best_3vs1lBIC <- model_diff %>%
group_by(COND) %>%
count(best_3vs1BIC)
# what was the average difference in AIC and BIC scores between model 3 and model 1
mAic_3vs1=tapply(model_diff$aic_3vs1, list(model_diff$COND), mean, na.rm = TRUE)
mBic_3vs1=tapply(model_diff$bic_3vs1, list(model_diff$COND), mean, na.rm = TRUE)
# local reward rate (dynamic) stats compared with the baseline model (model 4 vs 1)
# how many participants were better fit with model 4 compared with 1
n_best_4vs1AIC <- model_diff %>%
group_by(COND) %>%
count(best_4vs1AIC)
n_best_4vs1lBIC <- model_diff %>%
group_by(COND) %>%
count(best_4vs1BIC)
# what was the mean difference in AIC/BIC between the models?
mAic_4vs1=tapply(model_diff$aic_4vs1, list(model_diff$COND), mean, na.rm = TRUE)
mBic_4vs1=tapply(model_diff$bic_4vs1, list(model_diff$COND), mean, na.rm = TRUE)
# now let's get a quick overview of the coefficients
interceptcoef=tapply(modelresults.df$'(Intercept)',list(modelresults.df$COND, modelresults.df$MODEL), mean)
PrevRcoef=tapply(modelresults.df$R,list(modelresults.df$COND, modelresults.df$MODEL), mean)
AvgRcoef=tapply(modelresults.df$avgR,list(modelresults.df$COND, modelresults.df$MODEL), mean)
AvgRMaxcoef=tapply(modelresults.df$avgRmax,list(modelresults.df$COND, modelresults.df$MODEL), mean)
AvgRMaxDyncoef=tapply(modelresults.df$dynAvgRmax,list(modelresults.df$COND, modelresults.df$MODEL), mean)
# let's get a quick overview of the hyper-parameters
alphacoef=tapply(modelresults.df$ALPHA,list(modelresults.df$COND, modelresults.df$MODEL), mean)
alpha0coef=tapply(modelresults.df$ALPHA0,list(modelresults.df$COND, modelresults.df$MODEL), mean)
svalcoef=tapply(modelresults.df$INITVAL,list(modelresults.df$COND, modelresults.df$MODEL), mean)
# describe the regression coefficients in terms of mean and sem (scroll to model three, the winning model)
descr_interceptcoef <- describeBy(modelresults.df$`(Intercept)`, list(modelresults.df$COND, modelresults.df$MODEL), IQR=TRUE,quant=c(.25,.75))
descr_PrevRcoef <- describeBy(modelresults.df$R, list(modelresults.df$COND, modelresults.df$MODEL), IQR=TRUE,quant=c(.25,.75))
descr_AvgRcoef <- describeBy(modelresults.df$avgR,list(modelresults.df$COND, modelresults.df$MODEL), IQR=TRUE,quant=c(.25,.75))
descr_AvgRMaxcoef <- describeBy(modelresults.df$avgRmax, list(modelresults.df$COND, modelresults.df$MODEL), IQR=TRUE,quant=c(.25,.75))
# describe the hyper parameters in terms of mean and sem (scroll to model three, the winning model)
descr_INITVALtcoef <- describeBy(modelresults.df$INITVAL, list(modelresults.df$COND, modelresults.df$MODEL), IQR=TRUE,quant=c(.25,.75))
descr_ALPHAtcoef <- describeBy(modelresults.df$ALPHA, list(modelresults.df$COND, modelresults.df$MODEL), IQR=TRUE,quant=c(.25,.75))
descr_ALPHA0tcoef <- describeBy(modelresults.df$ALPHA0, list(modelresults.df$COND, modelresults.df$MODEL), IQR=TRUE,quant=c(.25,.75))
# extra content
# get the values for
AvgRcoef_samp=tapply(modelresults.df$avgR,list(modelresults.df$COND, modelresults.df$MODEL, modelresults.df$ID), mean)
AvgRMaxcoef_samp=tapply(modelresults.df$avgRmax,list(modelresults.df$COND, modelresults.df$MODEL, modelresults.df$ID), mean)
AvgRcoef_samp
View(model_diff)
coefficients_samp$interceptcoef=tapply(modelresults.df$'(Intercept)',list(modelresults.df$COND, modelresults.df$MODEL, modelresults.df$ID), mean)
coefficients_samp$PrevRcoef=tapply(modelresults.df$R,list(modelresults.df$COND, modelresults.df$MODEL, modelresults.df$ID), mean)
coefficients_samp$AvgRcoef=tapply(modelresults.df$avgR,list(modelresults.df$COND, modelresults.df$MODEL, modelresults.df$ID), mean)
coefficients_samp$AvgRMaxcoef=tapply(modelresults.df$avgRmax,list(modelresults.df$COND, modelresults.df$MODEL, modelresults.df$ID), mean)
coefficients_samp$AvgRMaxDyncoef=tapply(modelresults.df$dynAvgRmax,list(modelresults.df$COND, modelresults.df$MODEL, modelresults.df$ID), mean)
alphacoef=tapply(modelresults.df$ALPHA,list(modelresults.df$COND, modelresults.df$MODEL, modelresults.df$ID), mean)
# extra content
# get table each coefficient values for each participant and save
coefficients_samp=[]
coefficients_samp$interceptcoef=tapply(modelresults.df$'(Intercept)',list(modelresults.df$COND, modelresults.df$MODEL, modelresults.df$ID), mean)
coefficients_samp$PrevRcoef=tapply(modelresults.df$R,list(modelresults.df$COND, modelresults.df$MODEL, modelresults.df$ID), mean)
coefficients_samp$AvgRcoef=tapply(modelresults.df$avgR,list(modelresults.df$COND, modelresults.df$MODEL, modelresults.df$ID), mean)
coefficients_samp$AvgRMaxcoef=tapply(modelresults.df$avgRmax,list(modelresults.df$COND, modelresults.df$MODEL, modelresults.df$ID), mean)
coefficients_samp$AvgRMaxDyncoef=tapply(modelresults.df$dynAvgRmax,list(modelresults.df$COND, modelresults.df$MODEL, modelresults.df$ID), mean)
# extra content
# get table each coefficient values for each participant and save
DT <- data.table(
interceptcoef = tapply(modelresults.df$'(Intercept)',list(modelresults.df$COND, modelresults.df$MODEL, modelresults.df$ID), mean)
)
library(data.table)
install(data.table)
install.packages("data.table")
library(data.table)
install.packages("data.table")
install.packages("data.table")
library(data.table)
# extra content
# get table each coefficient values for each participant and save
DT <- data.table(
interceptcoef = tapply(modelresults.df$'(Intercept)',list(modelresults.df$COND, modelresults.df$MODEL, modelresults.df$ID), mean)
)
# extra content
# get table each coefficient values for each participant and save
DT <- data.table(
interceptcoef = tapply(modelresults.df$'(Intercept)',list(modelresults.df$COND, modelresults.df[MODEL==3], modelresults.df$ID), mean)
)
interceptcoef = tapply(modelresults.df$'(Intercept)',list(modelresults.df$COND, modelresults.df$MODEL, modelresults.df$ID), mean)
# now let's get a quick overview of the coefficients
interceptcoef=tapply(modelresults.df$'(Intercept)',list(modelresults.df$COND, modelresults.df$MODEL), mean)
PrevRcoef=tapply(modelresults.df$R,list(modelresults.df$COND, modelresults.df$MODEL), mean)
AvgRcoef=tapply(modelresults.df$avgR,list(modelresults.df$COND, modelresults.df$MODEL), mean)
AvgRMaxcoef=tapply(modelresults.df$avgRmax,list(modelresults.df$COND, modelresults.df$MODEL), mean)
AvgRMaxDyncoef=tapply(modelresults.df$dynAvgRmax,list(modelresults.df$COND, modelresults.df$MODEL), mean)
# let's get a quick overview of the hyper-parameters
alphacoef=tapply(modelresults.df$ALPHA,list(modelresults.df$COND, modelresults.df$MODEL), mean)
alpha0coef=tapply(modelresults.df$ALPHA0,list(modelresults.df$COND, modelresults.df$MODEL), mean)
svalcoef=tapply(modelresults.df$INITVAL,list(modelresults.df$COND, modelresults.df$MODEL), mean)
# extra content
# get table each coefficient values for each participant and save
DT <- data.table(
interceptcoef = tapply(modelresults.df$'(Intercept)',list(modelresults.df$COND, modelresults.df$MODEL, modelresults.df$ID))
)
View(DT)
View(DT)
# extra content
# get table each coefficient values for each participant and save
DT <- data.table(
interceptcoef = tapply(modelresults.df$'(Intercept)',list(modelresults.df$[COND==1], modelresults.df$MODEL, modelresults.df$ID))
)
# extra content
# get table each coefficient values for each participant and save
DT <- data.table(
interceptcoef = tapply(modelresults.df$'(Intercept)',list(modelresults.df$(COND==1), modelresults.df$MODEL, modelresults.df$ID))
)
# extra content
# get table each coefficient values for each participant and save
DT <- data.table(
interceptcoef = tapply(modelresults.df$'(Intercept)',list(modelresults.df$COND==1, modelresults.df$MODEL, modelresults.df$ID))
)
# extra content
# get table each coefficient values for each participant and save
DT <- data.table(
AvgRcoef_samp_for=tapply(modelresults.df$avgR,list(modelresults.df$COND==1, modelresults.df$MODEL==3, modelresults.df$ID)),
AvgRMaxcoef_samp_for=tapply(modelresults.df$avgRmax,list(modelresults.df$COND==1, modelresults.df$MODEL==3, modelresults.df$ID)),
AvgRcoef_samp_fre=tapply(modelresults.df$avgR,list(modelresults.df$COND==2, modelresults.df$MODEL==3, modelresults.df$ID)),
AvgRMaxcoef_samp_fre=tapply(modelresults.df$avgRmax,list(modelresults.df$COND==2, modelresults.df$MODEL==3, modelresults.df$ID))
)
# extra content
# get table each coefficient values for each participant and save
DT=[]
DT <- data.table(
AvgRcoef_samp_for=tapply(modelresults.df$avgR,list(modelresults.df$COND==1, modelresults.df$MODEL==3, modelresults.df$ID)),
AvgRMaxcoef_samp_for=tapply(modelresults.df$avgRmax,list(modelresults.df$COND==1, modelresults.df$MODEL==3, modelresults.df$ID)),
AvgRcoef_samp_fre=tapply(modelresults.df$avgR,list(modelresults.df$COND==2, modelresults.df$MODEL==3, modelresults.df$ID)),
AvgRMaxcoef_samp_fre=tapply(modelresults.df$avgRmax,list(modelresults.df$COND==2, modelresults.df$MODEL==3, modelresults.df$ID))
)
CT <- data.table(
AvgRcoef_samp_for=tapply(modelresults.df$avgR,list(modelresults.df$COND==1, modelresults.df$MODEL==3, modelresults.df$ID)),
AvgRMaxcoef_samp_for=tapply(modelresults.df$avgRmax,list(modelresults.df$COND==1, modelresults.df$MODEL==3, modelresults.df$ID)),
AvgRcoef_samp_fre=tapply(modelresults.df$avgR,list(modelresults.df$COND==2, modelresults.df$MODEL==3, modelresults.df$ID)),
AvgRMaxcoef_samp_fre=tapply(modelresults.df$avgRmax,list(modelresults.df$COND==2, modelresults.df$MODEL==3, modelresults.df$ID))
)
View(CT)
# extra content
# get table each coefficient values for each participant and save
model_diff <- modelresults.df %>%
mutate(ic_2vs1 = avgRmax[MODEL == 3] - avgR[MODEL == 3],
distinct(ID, COND, bic_2vs1)
# extra content
# get table each coefficient values for each participant and save
model_iff <- modelresults.df %>%
mutate(ic_2vs1 = avgRmax[MODEL == 3] - avgR[MODEL == 3],
distinct(ID, COND, bic_2vs1)
# extra content
# get table each coefficient values for each participant and save
model_iff <- modelresults.df %>%
# extra content
# get table each coefficient values for each participant and save
model_iff <- modelresults.df %>%
group_by(ID, COND) %>%
mutate(ic_2vs1 = avgRmax[MODEL == 3] - avgR[MODEL == 3],
ic_3vs1 = avgRmax[MODEL == 3] - avgR[MODEL == 3])%>%
distinct(ID, COND, ic_2vs1)
ic_2vs1
# now let's get a quick overview of the coefficients
interceptcoef=tapply(modelresults.df$'(Intercept)',list(modelresults.df$COND, modelresults.df$MODEL), mean)
interceptcoef
CT <- data.table(
AvgRcoef_samp_for=tapply(modelresults.df$avgR,list(modelresults.df$COND==1, modelresults.df$MODEL==3, modelresults.df$ID)),
AvgRMaxcoef_samp_for=tapply(modelresults.df$avgRmax,list(modelresults.df$COND==1, modelresults.df$MODEL==3, modelresults.df$ID)),
AvgRcoef_samp_fre=tapply(modelresults.df$avgR,list(modelresults.df$COND==2, modelresults.df$MODEL==3, modelresults.df$ID)),
AvgRMaxcoef_samp_fre=tapply(modelresults.df$avgRmax,list(modelresults.df$COND==2, modelresults.df$MODEL==3, modelresults.df$ID))
)
AvgRcoef_samp_for
View(CT)
View(CT)
AvgRcoef_samp_for=tapply(modelresults.df$avgR,list(modelresults.df$COND, modelresults.df$MODEL, modelresults.df$ID))
AvgRcoef_samp_for
modelresults.df %>%
dplyr::filter(COND==1, MODEL==3)
tt <- modelresults.df %>%
dplyr::filter(COND==1, MODEL==3)
tt <- modelresults.df %>%
dplyr::filter(COND==1, MODEL==3)
tt
# extra content
# get table each coefficient values for each participant and save
model_iff <- modelresults.df %>%
group_by(ID, COND) %>%
mutate(ic_2vs1 = avgRmax[MODEL == 3] - avgR[MODEL == 3],
ic_3vs1 = avgRmax[MODEL == 3] - avgR[MODEL == 3]) %>%
distinct(ID, COND, ic_2vs1)
library(tidyverse)
library(psych)
library(data.table)
tt <- modelresults.df %>%
dplyr::filter(COND==1, MODEL==3)
tt
unique(modelresults.df$COND)
unique(modelresults.df$MODEL)
tt <- modelresults.df %>%
dplyr::filter(COND, MODEL==3)
tt <- modelresults.df %>%
dplyr::filter(MODEL==3)
tt
tt <- modelresults.df %>%
dplyr::filter(MODEL==3) %>%
dplyr::select(ID,COND,avgR,avgRMax)
tt <- modelresults.df %>%
dplyr::filter(MODEL==3) %>%
dplyr::select(ID,COND,avgR,avgRmax)
tt
# extra content
# get table each coefficient values for each participant and save
tt <- modelresults.df %>%
dplyr::filter(MODEL==3) %>%
dplyr::select(ID,COND,avgR,avgRmax) %>%
data.table::dcast(ID ~ COND, value.var=c('avgR','avgRmax'))
# extra content
# get table each coefficient values for each participant and save
tt <- modelresults.df %>%
dplyr::filter(MODEL==3) %>%
dplyr::select(ID,COND,avgR,avgRmax) %>%
as.data.table() %>%
data.table::dcast(ID ~ COND, value.var=c('avgR','avgRmax'))
tt
write.table(tt, file='test.csv')
# extra content
# get table each coefficient values for each participant and save
tt <- modelresults.df %>%
dplyr::filter(MODEL==3) %>%
dplyr::select(ID,COND,avgR,avgRmax) %>%
as.data.table() %>%
data.table::dcast(ID ~ COND, value.var=c('avgR','avgRmax'))
write.table(tt, file='test.csv', row.names=FALSE)
# extra content
# get table each coefficient values for each participant and save
tvar <- modelresults.df %>%
dplyr::filter(MODEL==3) %>%
dplyr::select(ID,COND,(Intercept), R, avgR,avgRmax) %>%
as.data.table() %>%
data.table::dcast(ID ~ COND, value.var=c('intercept','R','avgR','avgRmax'))
# extra content
# get table each coefficient values for each participant and save
tvar <- modelresults.df %>%
dplyr::filter(MODEL==3) %>%
dplyr::select(ID,COND,(Intercept), R, avgR,avgRmax) %>%
as.data.table() %>%
data.table::dcast(ID ~ COND, value.var=c('(intercept)','R','avgR','avgRmax'))
# extra content
# get table each coefficient values for each participant and save
tvar <- modelresults.df %>%
dplyr::filter(MODEL==3) %>%
dplyr::select(ID,COND,(Intercept), R, avgR,avgRmax) %>%
as.data.table() %>%
data.table::dcast(ID ~ COND, value.var=c('(Intercept)','R','avgR','avgRmax'))
# extra content
# get table each coefficient values for each participant and save
tvar <- modelresults.df %>%
dplyr::filter(MODEL==3) %>%
dplyr::select(ID,COND,Intercept, R, avgR,avgRmax) %>%
as.data.table() %>%
data.table::dcast(ID ~ COND, value.var=c('(Intercept)','R','avgR','avgRmax'))
# extra content
# get table each coefficient values for each participant and save
tvar <- modelresults.df %>%
dplyr::filter(MODEL==3) %>%
dplyr::select(ID,COND,_Intercept_, R, avgR,avgRmax) %>%
as.data.table() %>%
data.table::dcast(ID ~ COND, value.var=c('(Intercept)','R','avgR','avgRmax'))
# extra content
# get table each coefficient values for each participant and save
tvar <- modelresults.df %>%
dplyr::filter(MODEL==3) %>%
dplyr::select(ID,COND,`(Intercept)`, R, avgR,avgRmax) %>%
as.data.table() %>%
data.table::dcast(ID ~ COND, value.var=c('(Intercept)','R','avgR','avgRmax'))
tvar
write.table(tvar, file='csv_output/regression_coefficients.csv', row.names=FALSE)
tvar
write.table(tvar, file='csv_output/regression_coefficients.csv', row.names=FALSE)
write.table(tvar, file='regression_coefficients.csv', row.names=FALSE)
library(tidyverse)
library(psych)
library(data.table)
# to look at results from all 70 participants
load('model_data/dat_with_allsubs/modelresults.Rdata')
load('model_data/dat_with_allsubs/modelpredictions.Rdata')
load('model_data/dat_with_allsubs/allglms.Rdata')
# extra content
# get table each coefficient values for each participant and save
tvar <- modelresults.df %>%
dplyr::filter(MODEL==3) %>%
dplyr::select(ID,COND,`(Intercept)`, R, avgR,avgRmax) %>%
as.data.table() %>%
data.table::dcast(ID ~ COND, value.var=c('(Intercept)','R','avgR','avgRmax'))
#write.table(tvar, file='regression_coefficients.csv', row.names=FALSE)
write.table(tvar, file='regression_coefficients_70.csv', row.names=FALSE)
# to look at results from all 70 participants
load('model_data/dat_with_allsubs/modelresults.Rdata')
load('model_data/dat_with_allsubs/modelpredictions.Rdata')
load('model_data/dat_with_allsubs/allglms.Rdata')
# to look at results from all 70 participants
load('model_data/dat_with_allsubs/modelresults.Rdata')
load('model_data/dat_with_allsubs/modelpredictions.Rdata')
load('model_data/dat_with_allsubs/allglms.Rdata')
# extra content
# get table each coefficient values for each participant and save
tvar <- modelresults.df %>%
dplyr::filter(MODEL==3) %>%
dplyr::select(ID,COND,`(Intercept)`, R, avgR,avgRmax) %>%
as.data.table() %>%
data.table::dcast(ID ~ COND, value.var=c('(Intercept)','R','avgR','avgRmax'))
#write.table(tvar, file='regression_coefficients.csv', row.names=FALSE)
write.table(tvar, file='regression_coefficients_70.csv', row.names=FALSE)
# to look at results from all 70 participants
load('model_data/dat_with_allsubs/modelresults.Rdata')
load('model_data/dat_with_allsubs/modelpredictions.Rdata')
load('model_data/dat_with_allsubs/allglms.Rdata')
# process model results to get differences between the models
model_diff <- modelresults.df %>%
group_by(ID, COND) %>%
mutate(bic_2vs1 = BIC[MODEL == 1] - BIC[MODEL == 2],
bic_3vs1 = BIC[MODEL == 1] - BIC[MODEL == 3],
bic_4vs1 = BIC[MODEL == 1] - BIC[MODEL == 4],
aic_2vs1 = AIC[MODEL == 1] - AIC[MODEL == 2],
aic_3vs1 = AIC[MODEL == 1] - AIC[MODEL == 3],
aic_4vs1 = AIC[MODEL == 1] - AIC[MODEL == 4],
# which model is best based on BIC?
best_modelBIC = ifelse((BIC[MODEL == 1] < BIC[MODEL == 2]) && (BIC[MODEL == 1] < BIC[MODEL == 3]) && (BIC[MODEL == 1] < BIC[MODEL == 4]), 1,
ifelse((BIC[MODEL == 2] < BIC[MODEL == 1]) && (BIC[MODEL == 2] < BIC[MODEL == 3]) && (BIC[MODEL == 2] < BIC[MODEL == 4]), 2,
ifelse((BIC[MODEL == 3] < BIC[MODEL == 1]) && (BIC[MODEL == 3] < BIC[MODEL == 2]) && (BIC[MODEL == 3] < BIC[MODEL == 4]), 3, 4))),
# which model is best based on AIC?
best_modelAIC = ifelse((AIC[MODEL == 1] < AIC[MODEL == 2]) && (AIC[MODEL == 1] < AIC[MODEL == 3]) && (AIC[MODEL == 1] < AIC[MODEL == 4]), 1,
ifelse((AIC[MODEL == 2] < AIC[MODEL == 1]) && (AIC[MODEL == 2] < AIC[MODEL == 3]) && (AIC[MODEL == 2] < AIC[MODEL == 4]), 2,
ifelse((AIC[MODEL == 3] < AIC[MODEL == 1]) && (AIC[MODEL == 3] < AIC[MODEL == 2]) && (AIC[MODEL == 3] < AIC[MODEL == 4]), 3, 4))),
# which model is best within specific comparisons (BIC)?
best_2vs1BIC = ifelse(BIC[MODEL == 1] < BIC[MODEL == 2], 1, 2),
best_3vs1BIC = ifelse(BIC[MODEL == 1] < BIC[MODEL == 3], 1, 3),
best_4vs1BIC = ifelse(BIC[MODEL == 1] < BIC[MODEL == 4], 1, 4),
# which model is best within specific comparisons (BIC)?
best_2vs1AIC = ifelse(AIC[MODEL == 1] < AIC[MODEL == 2], 1, 2),
best_3vs1AIC = ifelse(AIC[MODEL == 1] < AIC[MODEL == 3], 1, 3),
best_4vs1AIC = ifelse(AIC[MODEL == 1] < AIC[MODEL == 4], 1, 4)) %>%
distinct(ID, COND, bic_2vs1, bic_3vs1, bic_4vs1, aic_2vs1, aic_3vs1, aic_4vs1, best_modelBIC, best_modelAIC, best_2vs1BIC, best_3vs1BIC,best_4vs1BIC, best_2vs1AIC, best_3vs1AIC, best_4vs1AIC)
# what was the best model over all?
n_best_modelBIC <- model_diff %>%
group_by(COND) %>%
count(best_modelBIC)
n_best_modelAIC <- model_diff %>%
group_by(COND) %>%
count(best_modelAIC)
model_diff_forced <- model_diff %>% filter(COND == "forced")
model_diff_free <- model_diff %>% filter(COND == "free")
# local current value stats vs the baseline model (model 2 vs 1)
# how many participants were better fit with model 2 compared with 1
n_best_2vs1AIC <- model_diff %>%
group_by(COND) %>%
count(best_2vs1AIC)
n_best_2vs1lBIC <- model_diff %>%
group_by(COND) %>%
count(best_2vs1BIC)
# what was the average difference in AIC and BIC scores between model 2 and model 1
mAic_2vs1=tapply(model_diff$aic_2vs1, list(model_diff$COND), mean, na.rm = TRUE)
mBic_2vs1=tapply(model_diff$bic_2vs1, list(model_diff$COND), mean, na.rm = TRUE)
# local reward rate (static) compared with the baseline model (model 3 vs 1)
# how many participants were better fit with model 3 compared with 1
n_best_3vs1AIC <- model_diff %>%
group_by(COND) %>%
count(best_3vs1AIC)
n_best_3vs1lBIC <- model_diff %>%
group_by(COND) %>%
count(best_3vs1BIC)
# what was the average difference in AIC and BIC scores between model 3 and model 1
mAic_3vs1=tapply(model_diff$aic_3vs1, list(model_diff$COND), mean, na.rm = TRUE)
mBic_3vs1=tapply(model_diff$bic_3vs1, list(model_diff$COND), mean, na.rm = TRUE)
# local reward rate (dynamic) stats compared with the baseline model (model 4 vs 1)
# how many participants were better fit with model 4 compared with 1
n_best_4vs1AIC <- model_diff %>%
group_by(COND) %>%
count(best_4vs1AIC)
n_best_4vs1lBIC <- model_diff %>%
group_by(COND) %>%
count(best_4vs1BIC)
# what was the mean difference in AIC/BIC between the models?
mAic_4vs1=tapply(model_diff$aic_4vs1, list(model_diff$COND), mean, na.rm = TRUE)
mBic_4vs1=tapply(model_diff$bic_4vs1, list(model_diff$COND), mean, na.rm = TRUE)
# now let's get a quick overview of the coefficients
interceptcoef=tapply(modelresults.df$'(Intercept)',list(modelresults.df$COND, modelresults.df$MODEL), mean)
PrevRcoef=tapply(modelresults.df$R,list(modelresults.df$COND, modelresults.df$MODEL), mean)
AvgRcoef=tapply(modelresults.df$avgR,list(modelresults.df$COND, modelresults.df$MODEL), mean)
AvgRMaxcoef=tapply(modelresults.df$avgRmax,list(modelresults.df$COND, modelresults.df$MODEL), mean)
AvgRMaxDyncoef=tapply(modelresults.df$dynAvgRmax,list(modelresults.df$COND, modelresults.df$MODEL), mean)
# let's get a quick overview of the hyper-parameters
alphacoef=tapply(modelresults.df$ALPHA,list(modelresults.df$COND, modelresults.df$MODEL), mean)
alpha0coef=tapply(modelresults.df$ALPHA0,list(modelresults.df$COND, modelresults.df$MODEL), mean)
svalcoef=tapply(modelresults.df$INITVAL,list(modelresults.df$COND, modelresults.df$MODEL), mean)
# describe the regression coefficients in terms of mean and sem (scroll to model three, the winning model)
descr_interceptcoef <- describeBy(modelresults.df$`(Intercept)`, list(modelresults.df$COND, modelresults.df$MODEL), IQR=TRUE,quant=c(.25,.75))
descr_PrevRcoef <- describeBy(modelresults.df$R, list(modelresults.df$COND, modelresults.df$MODEL), IQR=TRUE,quant=c(.25,.75))
descr_AvgRcoef <- describeBy(modelresults.df$avgR,list(modelresults.df$COND, modelresults.df$MODEL), IQR=TRUE,quant=c(.25,.75))
descr_AvgRMaxcoef <- describeBy(modelresults.df$avgRmax, list(modelresults.df$COND, modelresults.df$MODEL), IQR=TRUE,quant=c(.25,.75))
# describe the hyper parameters in terms of mean and sem (scroll to model three, the winning model)
descr_INITVALtcoef <- describeBy(modelresults.df$INITVAL, list(modelresults.df$COND, modelresults.df$MODEL), IQR=TRUE,quant=c(.25,.75))
descr_ALPHAtcoef <- describeBy(modelresults.df$ALPHA, list(modelresults.df$COND, modelresults.df$MODEL), IQR=TRUE,quant=c(.25,.75))
descr_ALPHA0tcoef <- describeBy(modelresults.df$ALPHA0, list(modelresults.df$COND, modelresults.df$MODEL), IQR=TRUE,quant=c(.25,.75))
n_best_2vs1AIC
mAic_2vs1
mBic_2vs1
n_best_2vs1lBIC
n_best_3vs1AIC
mAic_3vs1
mBic_3vs1
n_best_3vs1lBIC
mAic_4vs1
mBic_4vs1
n_best_4vs1AIC
n_best_4vs1lBIC
n_best_modelAIC
n_best_3vs1AIC
mAic_3vs1
mBic_3vs1
n_best_3vs1AIC
n_best_modelBIC
n_best_modelAIC
n_best_2vs1AIC
mAic_2vs1
mBic_2vs1
mAic_3vs1
mBic_3vs1
mAic_4vs1
mBic_4vs1
n_best_modelBIC
n_best_modelAIC
descr_interceptcoef
descr_PrevRcoef
descr_AvgRcoef
descr_AvgRMaxcoef
descr_INITVALtcoef
descr_ALPHAtcoef
descr_ALPHA0tcoef
n_best_modelBIC
n_best_modelAIC
n_best_modelBIC
# to look at results from all 70 participants
load('model_data/data_70subs/modelresults.Rdata')
load('model_data/data_70subs/modelpredictions.Rdata')
load('model_data/data_70subs/allglms.Rdata')
# to look at results from all 70 participants
load('model_data/data_70subs/modelresults.Rdata')
load('model_data/data_70subs/modelpredictions.Rdata')
load('model_data/data_70subs/allglms.Rdata')
